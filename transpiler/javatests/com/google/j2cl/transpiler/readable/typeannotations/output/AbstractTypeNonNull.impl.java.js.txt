/**
 * @fileoverview transpiled from
 * com.google.j2cl.transpiler.readable.typeannotations.AbstractTypeNonNull.
 *
 * @suppress {const, extraRequire, missingOverride, missingRequire,
 * suspiciousCode, transitionalSuspiciousCodeWarnings, unusedLocalVariables,
 * uselessCode, strictModuleDepCheck}
 */
goog.module('com.google.j2cl.transpiler.readable.typeannotations.AbstractTypeNonNull$impl');


const ParametricType = goog.require('com.google.j2cl.transpiler.readable.typeannotations.ParametricType$impl');
const j_l_Object = goog.require('java.lang.Object$impl');
const $Util = goog.require('nativebootstrap.Util$impl');

let AbstractType = goog.forwardDeclare('com.google.j2cl.transpiler.readable.typeannotations.AbstractType$impl');
let List = goog.forwardDeclare('java.util.List$impl');
let Map = goog.forwardDeclare('java.util.Map$impl');


/**
 * @abstract
 * @implements {ParametricType<!AbstractType>}
 */
class AbstractTypeNonNull extends j_l_Object {
  /**
   * @protected
   */
  constructor() {
    super();
  }

  /**
   * @return {void}
   * @public
   */
  $ctor__com_google_j2cl_transpiler_readable_typeannotations_AbstractTypeNonNull__() {
    this.$ctor__java_lang_Object__();
  }

  /**
   * @abstract
   * @override
   * @param {!List<!Map<!Array<string>, Map<Array<!List<string>>,
   *     !Array<?string>>>>} arg0
   * @return {!List<!AbstractType>}
   * @public
   */
  m_m__java_util_List(arg0) {}

  /**
   * @abstract
   * @override
   * @param {string} arg0
   * @param {!AbstractType} arg1
   * @return {!AbstractType}
   * @public
   */
  m_m__java_lang_String__java_lang_Object(arg0, arg1) {}

  /**
   * @abstract
   * @override
   * @param {List<string>} arg0
   * @param {!AbstractType} arg1
   * @return {List<!AbstractType>}
   * @public
   */
  m_m__java_util_List__java_lang_Object(arg0, arg1) {}

  /**
   * @return {void}
   * @public
   */
  static $clinit() {
    AbstractTypeNonNull.$clinit = (() => {});
    AbstractTypeNonNull.$loadModules();
    j_l_Object.$clinit();
    ParametricType.$clinit();
  }

  /**
   * @param {?} instance
   * @return {boolean}
   * @public
   */
  static $isInstance(instance) {
    return instance instanceof AbstractTypeNonNull;
  }

  /**
   * @param {Function} classConstructor
   * @return {boolean}
   * @public
   */
  static $isAssignableFrom(classConstructor) {
    return $Util.$canCastClass(classConstructor, AbstractTypeNonNull);
  }

  /**
   * @public
   */
  static $loadModules() {}
};

$Util.$setClassMetadata(
    AbstractTypeNonNull,
    $Util.$makeClassName(
        'com.google.j2cl.transpiler.readable.typeannotations.AbstractTypeNonNull'));


ParametricType.$markImplementor(AbstractTypeNonNull);


exports = AbstractTypeNonNull;
//# sourceMappingURL=AbstractTypeNonNull.js.map